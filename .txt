ORM = Object Relacional Mapper
Mapeamento objeto-relacional

--- Op do sequelize
where: {
    age: {
        [Op.gt]: 40,    // > 40
        [Op.gte]: 40,   // >= 40
        [Op.lt]: 40,    // < 40
        [Op.lte]: 40,   // <= 40
        [Op.between]: [40, 70],     // 40 ~ 70
        [Op.notBetween]: [5, 10]    // not 5 ~ 10
    },
    name: {
        [Op.like]: 'pa%',   // comeca com 'pa'
    }
},
order: [
    ['age', 'DESC']
],
offset: 2,  // pula 2 itens
limit: 3,   // mostra 3 por page  

-------------------------------------------------
--- Inserir dados com sequelize

// build + save 
const user = User.build({
    name: '',
    age: ''
});
await user.save();

// create
let user;
try {
    await User.create({
        name:'Fulano',
        age: 15
    });    
} catch (e: any) {
    console.error(e.message);
}

-------------------------------------------------
-- Atualizar dados
// update
1 . Dados a serem alterados
2 . Condição para encontrar o(os) itens
await User.update({ name: 'Seu Chico', age: 53 }, {
    where: {
        id: 4
    }
});

usando findAll
let result = await User.findAll({ where: { id: 7 } });
if(result.length > 0){
    let usuario = result[0];
    usuario.name = 'Claudio';
    usuario.age = 46;
    await usuario.save();
}

-------------------------------------------------
-- Deletar dados
await User.destroy({
    where: {}
})

let result = await User.findAll({ where: { id: 7 } });
if(result.length > 0){
    let usuario = result[0];

    await usuario.destroy();
}

-------------------------------------------------
-- Buscar dados
let usuario = await User.findOne({
    where: {
        id: 1
    }
});

let usuario = await User.findByPk(1);